<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<init>
		<setStringFromProperty result="AppID" ini="Game" section="HuaWei" property="AppID" default=""/>
	</init>

	<androidManifestUpdates>
		<addPermission android:name="android.permission.ACCESS_NETWORK_STATE"/>
		<addPermission android:name="android.permission.ACCESS_WIFI_STATE"/>

		<setElement result="HuaWeiConfig" value="meta-data" />
		<addAttribute tag="$HuaWeiConfig" name="android:name" value="com.huawei.hms.client.appid" />
		<addAttribute tag="$HuaWeiConfig" name="android:value" value="appid=$S(AppID)" />
		<addElement tag="application" name="HuaWeiConfig"/>
	</androidManifestUpdates>

	<resourceCopies>
		<copyFile src="$S(PluginDir)/Android/Resources/agconnect-services.json" dst="$S(BuildDir)/agconnect-services.json" force="true"/>
	</resourceCopies>

	<buildscriptGradleAdditions>
		<insert>
			repositories {
				google()
				jcenter()
				// 配置HMS Core SDK的Maven仓地址。
				maven {url 'https://developer.huawei.com/repo/'}
			}

			dependencies {
				// 增加AGC插件配置，请您参见AGC插件依赖关系选择合适的AGC插件版本。
				classpath 'com.huawei.agconnect:agcp:1.3.1.300'
			}
		</insert>
	</buildscriptGradleAdditions>

	<buildGradleAdditions>
		<insert>
			apply plugin: 'com.huawei.agconnect'

			<!--plugins {
				// 添加如下配置
				id 'com.huawei.agconnect'
			}-->

			repositories {
				google()
				jcenter()
				// 配置HMS Core SDK的Maven仓地址。
				maven {url 'https://developer.huawei.com/repo/'}
			}
			
			dependencies {
				implementation 'com.huawei.hms:game:6.12.0.300'
				implementation 'com.huawei.hms:hwid:6.12.0.300'
				implementation 'com.huawei.hms:hmscoreinstaller:6.6.0.301'
			}

			android {
				compileOptions {
					sourceCompatibility JavaVersion.VERSION_1_8
					targetCompatibility JavaVersion.VERSION_1_8
				}
			}
		</insert>
	</buildGradleAdditions>

	<proguardAdditions>
		<insert>
			-ignorewarnings 
			-keepattributes *Annotation* 
			-keepattributes Exceptions 
			-keepattributes InnerClasses 
			-keepattributes Signature 
			-keepattributes SourceFile,LineNumberTable 
			-keep class com.huawei.hianalytics.**{*;} 
			-keep class com.huawei.updatesdk.**{*;} 
			-keep class com.huawei.hms.**{*;} 
			-keep interface com.huawei.hms.analytics.type.HAEventType{*;}
			-keep interface com.huawei.hms.analytics.type.HAParamType{*;}
			-keep class com.huawei.hms.analytics.HiAnalyticsInstance{*;}
			-keep class com.huawei.hms.analytics.HiAnalytics{*;}
		</insert>
	</proguardAdditions>

	<gameActivityImportAdditions>
		<insert>
			import com.huawei.hms.support.account.AccountAuthManager;
			import com.huawei.hms.support.account.request.AccountAuthParams;
			import com.huawei.hms.support.account.request.AccountAuthParamsHelper;
			import com.huawei.hms.support.account.result.AuthAccount;
			import com.huawei.hms.support.account.service.AccountAuthService;
			import com.huawei.hms.api.HuaweiMobileServicesUtil;
			import com.huawei.hms.jos.JosApps;
			import com.huawei.hms.jos.JosAppsClient;
			import com.huawei.hms.jos.JosStatusCodes;
			import com.huawei.hms.jos.AntiAddictionCallback;
			import com.huawei.updatesdk.service.otaupdate.CheckUpdateCallBack;
			import com.huawei.hms.jos.games.PlayersClient;
			import com.huawei.hms.jos.games.player.Player;
			import com.huawei.hms.jos.games.player.PlayersClientImpl;
			import com.huawei.updatesdk.service.otaupdate.UpdateKey;
			import com.huawei.hms.utils.ResourceLoaderUtil;
			import com.huawei.hms.jos.AppParams;
			import com.huawei.hms.jos.games.GamesStatusCodes;
			import com.huawei.hms.jos.AppUpdateClient;
			import com.huawei.updatesdk.service.appmgr.bean.ApkUpgradeInfo;
			import com.huawei.hms.support.account.result.AccountAuthResult;
			import java.io.Serializable;
			import java.lang.ref.WeakReference;
		</insert>
	</gameActivityImportAdditions>

	<gameActivityOnCreateAdditions>
		<insert>
			HuaweiMobileServicesUtil.setApplication(getApplication());
			mAuthParams = new AccountAuthParamsHelper(AccountAuthParams.DEFAULT_AUTH_REQUEST_PARAM_GAME).createParams();
			mAuthService = AccountAuthManager.getService(this, mAuthParams);
			updateCallback = new UpdateCallback(this);
		</insert>
	</gameActivityOnCreateAdditions>
	
	<gameActivityOnResumeAdditions>
		<insert>
			showFloatWindow();
		</insert>
	</gameActivityOnResumeAdditions>
	
	<gameActivityOnPauseAdditions>
		<insert>
			hideFloatWindow();
		</insert>
	</gameActivityOnPauseAdditions>
	
	<gameActivityClassAdditions>
		<insert>
	private int huaWeiInitStatus = -1;
	private UpdateCallback updateCallback;

	// 头像链接
	private String mAvatar = "";

	// 华为帐号登录授权参数
	private AccountAuthParams mAuthParams;

	// 华为帐号登录授权服务，提供静默登录接口silentSignIn，获取前台登录视图getSignInIntent，登出signOut等接口
	private AccountAuthService mAuthService;

	// 用户自定义signInIntent请求码
	// User-defined signInIntent request code
	private static final int HUAWEI_SIGN_IN_INTENT = 3000;
	
	// Callback that notify the C++ implementation that a task has completed
	// 初始化回调
	public native void nativeHuaWeiInitComplete(String data);
	// 登录回调
	public native void nativeHuaWeiLoginComplete(String data);
	// 注销回调
	public native void nativeHuaWeiLogoutComplete(String data);
	// 防沉迷回调
	public native void nativeHuaWeiAntiAddictionEvent(String data);

	// 执行初始化逻辑
	public void AndroidThunkJava_HuaWei_Init() {
		ResourceLoaderUtil.setmContext(this);
		
		AccountAuthParams params = AccountAuthParams.DEFAULT_AUTH_REQUEST_PARAM_GAME;
		JosAppsClient appsClient = JosApps.getJosAppsClient(this);
		com.huawei.hmf.tasks.Task&lt;Void&gt; initTask;
		initTask = appsClient.init(
			new AppParams(params, new AntiAddictionCallback() {
				@Override
				public void onExit() {
					// 该回调会在如下两种情况下返回:
					// 1.未成年人实名帐号在白天登录游戏，华为会弹框提示玩家不允许游戏，玩家点击“确定”，华为返回回调
					// 2.未成年实名帐号在国家允许的时间登录游戏，到晚上9点，华为会弹框提示玩家已到时间，玩家点击“知道了”，华为返回回调
					// 您可在此处实现游戏防沉迷功能，如保存游戏、调用帐号退出接口或直接游戏进程退出(如System.exit(0))
					
					nativeHuaWeiAntiAddictionEvent(OAuthLogin.makeAntiAddictionEventData(OAuthLogin.ANTI_ADDICTION_STARTUP, OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
				
					System.exit(0);
				}
			})
		);

		initTask.addOnSuccessListener(aVoid -> {
			Log.debug("HuaWei init success");
			
			// 检测应用新版本，中国大陆发布的应用：应用启动时必须使用华为升级接口进行应用升级。
			// 中国大陆以外发布的应用：不强制要求。
			huaWeiInitStatus = 0;
			
			checkUpdate();

			// 游戏初始化成功后务必成功调用过一次浮标显示接口
			showFloatWindow();
			
			// 一定要在init成功后，才可以调用登录接口
			// signIn();

			nativeHuaWeiInitComplete(OAuthLogin.makeOAuthInitData(OAuthLogin.RESPONSE_SUCCESS));
		}).addOnFailureListener(e -> {
			Log.debug("HuaWei init faild!");
			
			if (e instanceof com.huawei.hms.common.ApiException) {
				com.huawei.hms.common.ApiException apiException = (com.huawei.hms.common.ApiException) e;
				
				int statusCode = apiException.getStatusCode();
				huaWeiInitStatus = statusCode;

				int responseCode = OAuthLogin.RESPONSE_SYSTEM_ERROR;
				if (statusCode == JosStatusCodes.JOS_PRIVACY_PROTOCOL_REJECTED) {
					// 错误码为7401时表示用户未同意华为联运隐私协议
					Log.debug("has reject the protocol");
					// 此处您需禁止玩家进入游戏
				} else if (statusCode == GamesStatusCodes.GAME_STATE_NETWORK_ERROR) {
					// 错误码7002表示网络异常
					Log.debug("network error");
					// 此处您可提示玩家检查网络，请不要重复调用init接口，否则断网情况下可能会造成手机高耗电。
					responseCode = OAuthLogin.RESPONSE_NETWORK_ERROR;
					
				} else if (statusCode == 907135003) {
					// 907135003表示玩家取消HMS Core升级或组件升级
					Log.debug("init statusCode=" + statusCode);
					
					AndroidThunkJava_HuaWei_Init();
				} else {
					// 在此处实现其他错误码的处理
				}
				
				nativeHuaWeiInitComplete(OAuthLogin.makeOAuthInitData(responseCode));
			}
		});
	}

	// 先尝试静默登录，失败则显式登录
	public void AndroidThunkJava_HuaWei_Login() {
		Log.debug("HuaWei AndroidThunkJava_HuaWei_Login");
		
		if(mAuthService == null || huaWeiInitStatus != 0) {
			Log.debug("HuaWei: mAuthService == null || huaWeiInitStatus =" + huaWeiInitStatus);

			nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
			return;
		}

		com.huawei.hmf.tasks.Task&lt;AuthAccount&gt; task = mAuthService.silentSignIn();
		task.addOnSuccessListener(new com.huawei.hmf.tasks.OnSuccessListener&lt;AuthAccount&gt;() {
			@Override
			public void onSuccess(AuthAccount authAccount) {
				Log.debug("HuaWei AndroidThunkJava_HuaWei_Login Silentsuccessful");
				
				// 静默登录成功，处理返回的帐号对象AuthAccount，获取帐号信息并处理
				// Silent sign in is successful, the returned account object AuthAccount is processed,account information is obtained and processed
				Log.debug("Authentication succeeded.");
				Log.debug("display:" + authAccount.getDisplayName());
				Log.debug("avatar:" + authAccount.getAvatarUri().toString​());
				
				mAvatar = authAccount.getAvatarUri().toString​();
				getGamePlayer();
			}
		});
			
		task.addOnFailureListener(new com.huawei.hmf.tasks.OnFailureListener() {
			@Override
			public void onFailure(Exception e) {
				Log.debug("HuaWei silent signIn failed");
				
				// 静默登录失败，使用getSignInIntent()方法进行前台显式登录
				com.huawei.hms.common.ApiException apiException = (com.huawei.hms.common.ApiException) e;
				Log.debug("signIn failed:" + apiException.getStatusCode());
				Log.debug("start getSignInIntent");

				// 在此处实现华为帐号显式授权
				Intent signInIntent = mAuthService.getSignInIntent();
				startActivityForResult(signInIntent, HUAWEI_SIGN_IN_INTENT);
			}
		});
	}
	
	// 注销登录
	public void AndroidThunkJava_HuaWei_Logout() {
		Log.debug("AndroidThunkJava_HuaWei_Logout");
		
		com.huawei.hmf.tasks.Task&lt;Void&gt; signOutTask = mAuthService.signOut();
		signOutTask.addOnCompleteListener(new com.huawei.hmf.tasks.OnCompleteListener&lt;Void&gt;() {
			@Override
			public void onComplete(com.huawei.hmf.tasks.Task&lt;Void&gt; task) {
				Log.debug("signOut complete");
				
				nativeHuaWeiLogoutComplete(OAuthLogin.makeOAuthLogoutData(OAuthLogin.RESPONSE_SUCCESS));
			}
		});
	};

	// 防沉迷初始化
	public void AndroidThunkJava_HuaWei_StartupAntiAddiction() {
		Log.debug("AndroidThunkJava_HuaWei_StartupAntiAddiction");
		
		nativeHuaWeiAntiAddictionEvent(OAuthLogin.makeAntiAddictionEventData(OAuthLogin.ANTI_ADDICTION_STARTUP, OAuthLogin.RESPONSE_SUCCESS, null));
	}

	// 防沉迷登出
	public void AndroidThunkJava_HuaWei_ShutdownAntiAddiction() {
		Log.debug("AndroidThunkJava_HuaWei_ShutdownAntiAddiction");
		
		nativeHuaWeiAntiAddictionEvent(OAuthLogin.makeAntiAddictionEventData(OAuthLogin.ANTI_ADDICTION_SHUTDOWN, OAuthLogin.RESPONSE_SUCCESS, null));
	};

	/**
	 * 获取当前登录的玩家对象，从Player对象中获取玩家信息。
	 */
	public void getGamePlayer() {
		Log.debug("HuaWei getGamePlayer.");
		
		// 调用getPlayersClient方法初始化
		PlayersClient client = com.huawei.hms.jos.games.Games.getPlayersClient(this);
		
		// 执行游戏登录
		com.huawei.hmf.tasks.Task&lt;Player&gt; task = client.getGamePlayer();
		task.addOnSuccessListener(new com.huawei.hmf.tasks.OnSuccessListener&lt;Player&gt;() {
			@Override
			public void onSuccess(Player player) {
				Log.debug("HuaWei getGamePlayer Success");
				
				// 获取玩家信息成功，校验服务器端的玩家信息，校验通过后允许进入游戏
				nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SUCCESS, getOAuthData(player)));
			}
		}).addOnFailureListener(new com.huawei.hmf.tasks.OnFailureListener() {
			@Override
			public void onFailure(Exception e) {
				Log.debug("HuaWei getGamePlayer fails");

				if (e instanceof com.huawei.hms.common.ApiException) {
					int code = ((com.huawei.hms.common.ApiException) e).getStatusCode();
					
					// 获取玩家信息失败，不允许进入游戏，并根据错误码处理
					if (7400 == code || 7018 == code) {
						// 7400表示用户未签署联运协议，需要继续调用init接口
						// 7018表示初始化失败，需要继续调用init接口
						
						AndroidThunkJava_HuaWei_Init();
					}
					
					nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
				}
			}
		});
	}
	
	private OAuthData getOAuthData(Player player)
	{
		OAuthData oauthData = new OAuthData();
		oauthData.UID = player.getUnionId();
		oauthData.Nickname = player.getDisplayName();
		oauthData.Avatar = mAvatar;
		oauthData.Key = "";
		oauthData.AccessToken = player.getAccessToken();
		
		return oauthData;
	}

	/**
	 * 显示游戏浮标
	 */
	private void showFloatWindow() {
		// 请务必在init成功后，调用浮标接口
		Log.debug("HuaWei showFloatWindow:" + huaWeiInitStatus);
		if(huaWeiInitStatus == 0)
		{
			com.huawei.hms.jos.games.Games.getBuoyClient(this).showFloatWindow();
		}
	}
	
	/**
	 * 隐藏游戏浮标
	 */
	private void hideFloatWindow() {
		Log.debug("HuaWei hideFloatWindow:" + huaWeiInitStatus);
		if(huaWeiInitStatus == 0)
		{
			com.huawei.hms.jos.games.Games.getBuoyClient(this).hideFloatWindow();
		}
	}
	
	/**
	 * 检查更新
	 */
	public void checkUpdate() {
		AppUpdateClient client = JosApps.getAppUpdateClient(this);
		client.checkAppUpdate(this, updateCallback);
	}
	
	/**
	 * 检查更新回调
	 */
	private static class UpdateCallback implements CheckUpdateCallBack {
		private WeakReference&lt;Context&gt; mContextWeakReference;

		public UpdateCallback(Context context) {
			mContextWeakReference = new WeakReference&lt;&gt;(context);
		}

		/**
		 * 从应用市场获取的更新状态信息
		 *
		 * @param intent see detail: https://developer.huawei.com/consumer/cn/doc/development/HMS-References/appupdateclient#intent
		 */
		@Override
		public void onUpdateInfo(Intent intent) {
			if (intent != null) {
				// 更新状态信息
				int status = intent.getIntExtra(UpdateKey.STATUS, -99);
				Log.debug("HuaWei check update status is:" + status);
				
				// 返回错误码
				int rtnCode = intent.getIntExtra(UpdateKey.FAIL_CODE, -99);
				
				// 返回失败信息
				String rtnMessage = intent.getStringExtra(UpdateKey.FAIL_REASON);
			
				// 强制更新应用时，弹出对话框后用户是否点击“退出应用”按钮
				boolean isExit = intent.getBooleanExtra(UpdateKey.MUST_UPDATE, false);
				Log.debug("rtnCode = " + rtnCode + "rtnMessage = " + rtnMessage);

				Serializable info = intent.getSerializableExtra(UpdateKey.INFO);
				// 如果info属于ApkUpgradeInfo类型，则拉起更新弹框
				if (info instanceof ApkUpgradeInfo) {
					// 如果info属于ApkUpgradeInfo类型，则拉起更新弹框
					Context context = mContextWeakReference.get();
					if (context != null) {
						JosApps.getAppUpdateClient(context).showUpdateDialog(context, (ApkUpgradeInfo) info, false);
					}
					Log.debug("check update success and there is a new update");
				}
				
				Log.debug("check update isExit=" + isExit);
				if (isExit) {
					// 是强制更新应用，用户在弹出的升级提示框中选择了“退出应用”，处理逻辑由您自行控制，这里只是个例子
					System.exit(0);
				}
			}
		}
		
		// 预留, 无需处理
		@Override
		public void onMarketInstallInfo(Intent intent) {
	
		}

		// 预留, 无需处理
		@Override
		public void onMarketStoreError(int responseCode) {
	
		}

		// 预留, 无需处理
		@Override
		public void onUpdateStoreError(int responseCode) {
	
		}
	}
		</insert>
	</gameActivityClassAdditions>

	<gameActivityOnActivityResultAdditions>
		<insert>
			if (HUAWEI_SIGN_IN_INTENT == requestCode) {
				Log.debug("onActivityResult HUAWEI_SIGN_IN_INTENT");
				Log.debug("data: " + ((data != null) ? data.toString() : "null"));

				if (null == data) {
					Log.debug("HuaWei signIn intent is null");
					
					nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
					return;
				}
				
				String jsonSignInResult = data.getStringExtra("HUAWEIID_SIGNIN_RESULT");
				if (TextUtils.isEmpty(jsonSignInResult)) {
					Log.debug("HuaWei SignIn result is empty");
					
					nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
					return;
				}
				
				try {
					AccountAuthResult signInResult = new AccountAuthResult().fromJson(jsonSignInResult);
					if (0 == signInResult.getStatus().getStatusCode()) {
						Log.debug("HuaWei Sign in success.");
						Log.debug("Sign in result: " + signInResult.toJson());

						mAvatar = signInResult.getAccount().getAvatarUri().toString​();			
						getGamePlayer();
					} else {
						Log.debug("HuaWei Sign in failed: " + signInResult.getStatus().getStatusCode());
						
						nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
					}
				}
				catch (JSONException var7) {
					Log.debug("HuaWei Failed to convert json from signInResult.");
					
					nativeHuaWeiLoginComplete(OAuthLogin.makeOAuthLoginData(OAuthLogin.RESPONSE_SYSTEM_ERROR, null));
				}
			}
		</insert>
	</gameActivityOnActivityResultAdditions>
</root>
